// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2024 13:42:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    task
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module task_vlg_sample_tst(
	C0,
	C1,
	sampler_tx
);
input  C0;
input  C1;
output sampler_tx;

reg sample;
time current_time;
always @(C0 or C1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module task_vlg_check_tst (
	HEX0_A,
	HEX0_B,
	HEX0_C,
	HEX0_D,
	HEX0_E,
	HEX0_F,
	HEX0_G,
	sampler_rx
);
input  HEX0_A;
input  HEX0_B;
input  HEX0_C;
input  HEX0_D;
input  HEX0_E;
input  HEX0_F;
input  HEX0_G;
input sampler_rx;

reg  HEX0_A_expected;
reg  HEX0_B_expected;
reg  HEX0_C_expected;
reg  HEX0_D_expected;
reg  HEX0_E_expected;
reg  HEX0_F_expected;
reg  HEX0_G_expected;

reg  HEX0_A_prev;
reg  HEX0_B_prev;
reg  HEX0_C_prev;
reg  HEX0_D_prev;
reg  HEX0_E_prev;
reg  HEX0_F_prev;
reg  HEX0_G_prev;

reg  HEX0_A_expected_prev;
reg  HEX0_B_expected_prev;
reg  HEX0_C_expected_prev;
reg  HEX0_D_expected_prev;
reg  HEX0_E_expected_prev;
reg  HEX0_F_expected_prev;
reg  HEX0_G_expected_prev;

reg  last_HEX0_A_exp;
reg  last_HEX0_B_exp;
reg  last_HEX0_C_exp;
reg  last_HEX0_D_exp;
reg  last_HEX0_E_exp;
reg  last_HEX0_F_exp;
reg  last_HEX0_G_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_A_prev = HEX0_A;
	HEX0_B_prev = HEX0_B;
	HEX0_C_prev = HEX0_C;
	HEX0_D_prev = HEX0_D;
	HEX0_E_prev = HEX0_E;
	HEX0_F_prev = HEX0_F;
	HEX0_G_prev = HEX0_G;
end

// update expected /o prevs

always @(trigger)
begin
	HEX0_A_expected_prev = HEX0_A_expected;
	HEX0_B_expected_prev = HEX0_B_expected;
	HEX0_C_expected_prev = HEX0_C_expected;
	HEX0_D_expected_prev = HEX0_D_expected;
	HEX0_E_expected_prev = HEX0_E_expected;
	HEX0_F_expected_prev = HEX0_F_expected;
	HEX0_G_expected_prev = HEX0_G_expected;
end



// expected HEX0_A
initial
begin
	HEX0_A_expected = 1'bX;
end 

// expected HEX0_B
initial
begin
	HEX0_B_expected = 1'bX;
end 

// expected HEX0_C
initial
begin
	HEX0_C_expected = 1'bX;
end 

// expected HEX0_D
initial
begin
	HEX0_D_expected = 1'bX;
end 

// expected HEX0_E
initial
begin
	HEX0_E_expected = 1'bX;
end 

// expected HEX0_F
initial
begin
	HEX0_F_expected = 1'bX;
end 

// expected HEX0_G
initial
begin
	HEX0_G_expected = 1'bX;
end 
// generate trigger
always @(HEX0_A_expected or HEX0_A or HEX0_B_expected or HEX0_B or HEX0_C_expected or HEX0_C or HEX0_D_expected or HEX0_D or HEX0_E_expected or HEX0_E or HEX0_F_expected or HEX0_F or HEX0_G_expected or HEX0_G)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0_A = %b | expected HEX0_B = %b | expected HEX0_C = %b | expected HEX0_D = %b | expected HEX0_E = %b | expected HEX0_F = %b | expected HEX0_G = %b | ",HEX0_A_expected_prev,HEX0_B_expected_prev,HEX0_C_expected_prev,HEX0_D_expected_prev,HEX0_E_expected_prev,HEX0_F_expected_prev,HEX0_G_expected_prev);
	$display("| real HEX0_A = %b | real HEX0_B = %b | real HEX0_C = %b | real HEX0_D = %b | real HEX0_E = %b | real HEX0_F = %b | real HEX0_G = %b | ",HEX0_A_prev,HEX0_B_prev,HEX0_C_prev,HEX0_D_prev,HEX0_E_prev,HEX0_F_prev,HEX0_G_prev);
`endif
	if (
		( HEX0_A_expected_prev !== 1'bx ) && ( HEX0_A_prev !== HEX0_A_expected_prev )
		&& ((HEX0_A_expected_prev !== last_HEX0_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_A_expected_prev);
		$display ("     Real value = %b", HEX0_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_A_exp = HEX0_A_expected_prev;
	end
	if (
		( HEX0_B_expected_prev !== 1'bx ) && ( HEX0_B_prev !== HEX0_B_expected_prev )
		&& ((HEX0_B_expected_prev !== last_HEX0_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_B_expected_prev);
		$display ("     Real value = %b", HEX0_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX0_B_exp = HEX0_B_expected_prev;
	end
	if (
		( HEX0_C_expected_prev !== 1'bx ) && ( HEX0_C_prev !== HEX0_C_expected_prev )
		&& ((HEX0_C_expected_prev !== last_HEX0_C_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_C_expected_prev);
		$display ("     Real value = %b", HEX0_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX0_C_exp = HEX0_C_expected_prev;
	end
	if (
		( HEX0_D_expected_prev !== 1'bx ) && ( HEX0_D_prev !== HEX0_D_expected_prev )
		&& ((HEX0_D_expected_prev !== last_HEX0_D_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_D_expected_prev);
		$display ("     Real value = %b", HEX0_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX0_D_exp = HEX0_D_expected_prev;
	end
	if (
		( HEX0_E_expected_prev !== 1'bx ) && ( HEX0_E_prev !== HEX0_E_expected_prev )
		&& ((HEX0_E_expected_prev !== last_HEX0_E_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_E_expected_prev);
		$display ("     Real value = %b", HEX0_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX0_E_exp = HEX0_E_expected_prev;
	end
	if (
		( HEX0_F_expected_prev !== 1'bx ) && ( HEX0_F_prev !== HEX0_F_expected_prev )
		&& ((HEX0_F_expected_prev !== last_HEX0_F_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0_F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_F_expected_prev);
		$display ("     Real value = %b", HEX0_F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX0_F_exp = HEX0_F_expected_prev;
	end
	if (
		( HEX0_G_expected_prev !== 1'bx ) && ( HEX0_G_prev !== HEX0_G_expected_prev )
		&& ((HEX0_G_expected_prev !== last_HEX0_G_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0_G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_G_expected_prev);
		$display ("     Real value = %b", HEX0_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX0_G_exp = HEX0_G_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#400000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module task_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C0;
reg C1;
// wires                                               
wire HEX0_A;
wire HEX0_B;
wire HEX0_C;
wire HEX0_D;
wire HEX0_E;
wire HEX0_F;
wire HEX0_G;

wire sampler;                             

// assign statements (if any)                          
task i1 (
// port map - connection between master ports and signals/registers   
	.C0(C0),
	.C1(C1),
	.HEX0_A(HEX0_A),
	.HEX0_B(HEX0_B),
	.HEX0_C(HEX0_C),
	.HEX0_D(HEX0_D),
	.HEX0_E(HEX0_E),
	.HEX0_F(HEX0_F),
	.HEX0_G(HEX0_G)
);

// C0
always
begin
	C0 = 1'b0;
	C0 = #200000 1'b1;
	#200000;
end 

// C1
always
begin
	C1 = 1'b0;
	C1 = #100000 1'b1;
	#100000;
end 

task_vlg_sample_tst tb_sample (
	.C0(C0),
	.C1(C1),
	.sampler_tx(sampler)
);

task_vlg_check_tst tb_out(
	.HEX0_A(HEX0_A),
	.HEX0_B(HEX0_B),
	.HEX0_C(HEX0_C),
	.HEX0_D(HEX0_D),
	.HEX0_E(HEX0_E),
	.HEX0_F(HEX0_F),
	.HEX0_G(HEX0_G),
	.sampler_rx(sampler)
);
endmodule

