// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2024 20:43:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	X2,
	Z1,
	Z2,
	Z3,
	Z4,
	sampler_tx
);
input  X2;
input  Z1;
input  Z2;
input  Z3;
input  Z4;
output sampler_tx;

reg sample;
time current_time;
always @(X2 or Z1 or Z2 or Z3 or Z4)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	F,
	X1,
	X3,
	sampler_rx
);
input  F;
input  X1;
input  X3;
input sampler_rx;

reg  F_expected;
reg  X1_expected;
reg  X3_expected;

reg  F_prev;
reg  X1_prev;
reg  X3_prev;

reg  F_expected_prev;
reg  X1_expected_prev;
reg  X3_expected_prev;

reg  last_F_exp;
reg  last_X1_exp;
reg  last_X3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	F_prev = F;
	X1_prev = X1;
	X3_prev = X3;
end

// update expected /o prevs

always @(trigger)
begin
	F_expected_prev = F_expected;
	X1_expected_prev = X1_expected;
	X3_expected_prev = X3_expected;
end



// expected F
initial
begin
	F_expected = 1'bX;
end 

// expected X1
initial
begin
	X1_expected = 1'bX;
end 

// expected X3
initial
begin
	X3_expected = 1'bX;
end 
// generate trigger
always @(F_expected or F or X1_expected or X1 or X3_expected or X3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected F = %b | expected X1 = %b | expected X3 = %b | ",F_expected_prev,X1_expected_prev,X3_expected_prev);
	$display("| real F = %b | real X1 = %b | real X3 = %b | ",F_prev,X1_prev,X3_prev);
`endif
	if (
		( F_expected_prev !== 1'bx ) && ( F_prev !== F_expected_prev )
		&& ((F_expected_prev !== last_F_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_exp = F_expected_prev;
	end
	if (
		( X1_expected_prev !== 1'bx ) && ( X1_prev !== X1_expected_prev )
		&& ((X1_expected_prev !== last_X1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X1_expected_prev);
		$display ("     Real value = %b", X1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X1_exp = X1_expected_prev;
	end
	if (
		( X3_expected_prev !== 1'bx ) && ( X3_prev !== X3_expected_prev )
		&& ((X3_expected_prev !== last_X3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X3_expected_prev);
		$display ("     Real value = %b", X3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_X3_exp = X3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg X2;
reg Z1;
reg Z2;
reg Z3;
reg Z4;
// wires                                               
wire F;
wire X1;
wire X3;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.F(F),
	.X1(X1),
	.X2(X2),
	.X3(X3),
	.Z1(Z1),
	.Z2(Z2),
	.Z3(Z3),
	.Z4(Z4)
);

// X2
always
begin
	X2 = 1'b0;
	X2 = #1600000 1'b1;
	#1600000;
end 

// Z1
always
begin
	Z1 = 1'b0;
	Z1 = #800000 1'b1;
	#800000;
end 

// Z2
always
begin
	Z2 = 1'b0;
	Z2 = #400000 1'b1;
	#400000;
end 

// Z3
always
begin
	Z3 = 1'b0;
	Z3 = #200000 1'b1;
	#200000;
end 

// Z4
always
begin
	Z4 = 1'b0;
	Z4 = #100000 1'b1;
	#100000;
end 

main_vlg_sample_tst tb_sample (
	.X2(X2),
	.Z1(Z1),
	.Z2(Z2),
	.Z3(Z3),
	.Z4(Z4),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.F(F),
	.X1(X1),
	.X3(X3),
	.sampler_rx(sampler)
);
endmodule

