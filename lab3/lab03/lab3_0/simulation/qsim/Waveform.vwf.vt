// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/10/2024 18:10:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	Cabbage,
	Goat,
	Wolf,
	sampler_tx
);
input  Cabbage;
input  Goat;
input  Wolf;
output sampler_tx;

reg sample;
time current_time;
always @(Cabbage or Goat or Wolf)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	Alarm,
	sampler_rx
);
input  Alarm;
input sampler_rx;

reg  Alarm_expected;

reg  Alarm_prev;

reg  Alarm_expected_prev;

reg  last_Alarm_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Alarm_prev = Alarm;
end

// update expected /o prevs

always @(trigger)
begin
	Alarm_expected_prev = Alarm_expected;
end



// expected Alarm
initial
begin
	Alarm_expected = 1'bX;
end 
// generate trigger
always @(Alarm_expected or Alarm)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Alarm = %b | ",Alarm_expected_prev);
	$display("| real Alarm = %b | ",Alarm_prev);
`endif
	if (
		( Alarm_expected_prev !== 1'bx ) && ( Alarm_prev !== Alarm_expected_prev )
		&& ((Alarm_expected_prev !== last_Alarm_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Alarm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Alarm_expected_prev);
		$display ("     Real value = %b", Alarm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Alarm_exp = Alarm_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#800000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cabbage;
reg Goat;
reg Wolf;
// wires                                               
wire Alarm;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.Alarm(Alarm),
	.Cabbage(Cabbage),
	.Goat(Goat),
	.Wolf(Wolf)
);

// Cabbage
always
begin
	Cabbage = 1'b0;
	Cabbage = #400000 1'b1;
	#400000;
end 

// Goat
always
begin
	Goat = 1'b0;
	Goat = #200000 1'b1;
	#200000;
end 

// Wolf
always
begin
	Wolf = 1'b0;
	Wolf = #100000 1'b1;
	#100000;
end 

main_vlg_sample_tst tb_sample (
	.Cabbage(Cabbage),
	.Goat(Goat),
	.Wolf(Wolf),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.Alarm(Alarm),
	.sampler_rx(sampler)
);
endmodule

